源文件的基本组成是类
一个源文件中最多只有一个public类
每一个类编译对应一个.class文件



每一个文件的文件名  HelloWorld.java    
		则类名应该为：public class HelloWorld{}
		
每一个class 内部只有一个 public static void main (string []args){}

path环境变量的作用--帮助系统操作java
　　用javac将源码编译成.class文件, 在调用java 命令让程序执行.
　　问题是:系统是如何找到并调用javac.exe和java.exe两个应用程序的？
　　打个比方，平时我们运行某一程序，比如魔兽，酷狗音乐，都是先找到它们的应用 程序war3.exe和kugou.exe的所在位置，然后双击运行。那么操作系统是如何自动找到javac.exe和java.exe的位置呢？
　　classpath环境变量的作用--告诉java虚拟机所有的可执行文件.class都在哪
　　它的值也是由目录组成，它的作用在于告诉Java执行环境，在哪些目录下可以找到所要执行的Java程序所需要的类或者包。
　　比如要运行一个名为Test.class的文件，而这个程序调用了另一个Link.class文件的内容，那么系统必须知道 Link.class文件的位置才能调用Link.class文件。如果Link.class文件的目录在classpath环境变量的值中，就可以找到了。
　　java_home环境变量---使得其他相关环境变量的配置更加方便简洁
　　java_home一般设置为jdk的安装目录，比如C:\Program Files\Java\jdk1.6.0_22.如果设置了java_home，那么path环境变量可以配置为“%java_home%\bin”.
	
	Java test.java
	java test
	运行不用加test.class

面向对象的编程思想
	attribute：属性
	method：方法
	
	
类对象之间的关系
	关联关系：弱，方法的参数是某一个类的对象
	继承关系：一般和特殊的关系
	聚合：松耦合
	合成：聚耦合
	实现关系：继承，然后实现
	
				
	
面向组件的思维
	webservice

	
	
引用类型
	class 
	interface 
	array
	
	所有的引用类型都是指针
	类是静态的概念，代码区的对象是new出来的，位于堆内存
	类的每个成员变量在不同的对象中都有不同的值（除了静态变量）
	而方法只有一份，执行的时候才占用内存
	
	
约定俗称的命名规则
	类名的首字母大写
	变量名和方法名的首字母小写
	驼峰标志
	
垃圾收集
		没有任何一个引用指向它，被收集
		
	
重载方法和重写方法
	方法名都一样，但是参数不一样
	overload和 overwrite
	
	
this 
	可以看做一个变量，其值是当前对象的引用
static 
	static 声明的成员变量属于整个类
	静态的方法不能访问非静态的成员	
	
	静态函数只能调用静态函数，要调用非静态函数，只能用类
	
package和import语句
	为了便于管理大型软件系统中数目众多的类，解决类的命名的冲突
	的问题，java引用包package机制，提供类的多重命名空间
	
	package 语句作为java源文件的第一条语句，指明该文件中
	定义的类所在的包
	
	如果把一个类
		编译出来的类必须放在包里面。正确的目录下面，和包的层次必须完全一致
	
	import com.bjsxt.java140.*;
			com/bjsxt/java140/
	
	带包的类	
		package com.hehe;
		javac -d . a.java
		在当前目录下生成包。
	
	
继承权限
	extends:
		public class a extends b{
			
		}
		
	public
	private 
	default（默认）
	protected
	


final:
	初始化以后不能修改
	初始化的时机：显示初始化，构造函数初始化
	修饰类：类不能被继承
	修饰变量：变量就成了常量，值不能改变
			修饰基本数据类型：值不能别改变
			修饰引用数据类型：引用对象的属性值可以修改
			
	修饰方法：方法不能被重写
	
	
多态
	前提
		要有继承关系
		要有方法重写
		要有父类引用指向子类对象
		
	成员变量的访问
		编译看左边（父类），运行看左边（父类）
	成员方法的访问
		编译看左边（父类），运行看右边（子类）
		编译看父类的方法保证编译能够通过，动态绑定。

	静态成员方法
		编译看左边，运行看左边，相当于是类在调用。
		
	多态的弊端
		不能使用子类特有的属性和行为
		不能调用子类的属性和属于子类的私有方法，要想调用需要进行向下对引用进行强制类型转换
		Person p=new Son();
		Son s=(Son)p;
	多态的好处
		当做参数的时候多态最好，因为拓展性好
		主要类型转换异常
		instanceof进行类型的转换的判别
			if(a instanceof cat){
				
			}else (a instanceof dog){
				
			}
		method(Animal a)
		method(new Dog)
		method(new Cat)
		
		
抽象类
	abstract class 类名{}
	abstract class{
		public abstract eat()		
	}
	
	什么作用呢？？
	抽象类不能实例化，
	抽象的子类要么抽象类，要么实例化
	有抽象方法的类一定是抽象类或者接口
	
	一个抽象类，如果没有抽象方法，可不可以定义为抽象类？
	可以，目的，不让其他类创建本类对象，交给子类完成
	
	abstract不能和哪些关键字共存
		static,final,private
	
		
接口类
	interface 
	子类实现接口，并用implements表示
	接口中定义的变量都是常量，
	interface Inter{
		int num=10;
		//默认属性，public static  final
	}
	接口中没有构造方法，
	成员方法：只能是抽象方法,默认public abstract
	
	类与类之间只能是单继承，可以多层继承
	接口与接口可以单继承也可以多继承
	接口和类可以单实现，也可以多实现
	
	
	
内部类
	内部类可以获取到外部类的成员，它能获取到外部类的引用，Out.this.memeber;
	类中定义的类：
		class Outer{
			class Inner{
				public void method(){
					System.out.println("haha");
				}
			}
		}
		内部类的访问：
		public static void main(String [] args){
			Outer.Inner oi = new Outer().new Inner();
			oi.method();
		}

	成员内部类私有使用
		只能在其所在的方法中使用
			 class Outer{
				private class Inner{
					public void method(){
						System.out.println("haha");
					}
				}
				public void print (){
					Inner i = new Inner();
					i.method();
				}
			}
	静态内部类
		class Outer{
			static class Inner{
				static void method(){
					System.out.println("haha");
				}
			}
		}
		public static void main(String [] args){
			Outer.Inner oi = new Outer.Inner();
			oi.method();
		}		
	
	匿名内部类
		匿名内部类使用局部变量必须使用，final修饰
		局部内部类的一种，针对重写一个方法的类使用
		
		实现接口
		new 类名(){
			重写方法；
		}
		
		
		interface Inter{
			void show();
		}
		class Outer{
			public static Inter method(){
				return new Inter(){          //实现inter接口，代表Inter的子类对象
					public void show(){
						System.out.println("show");
					}
				}
			}
		}
		class Test{
			public static void main(String[]args){
				Inter i= Outer.method();
				i.show();
			}
		}
		
		匿名内部类当做参数传递，本质把匿名内部类看做一个对象
		
	elipse 
		alt shift s c :生成无参数的构造函数
	
		jar :多个class文件的压缩包
			用别人写好的东西
		在elipse中查看源码f3,shift f2查看doc文档
	
	
	object类是所有Java类的根基类
		
		hashcodes table 
		
		equals()和== 的区别：== 比较运算符，既可以比较基本数据类型，也可以比较引用数据类型，基本数据类型比较的是值，引用数据类型比较的是地址值
							equals方法在没有重写的时候，比较的是地址值，但是比较地址值是没有意义的，需要重写equals方法
		toString
	


异常
	android:客户端开发
	javaee:一般属于服务器方面的开发，一般是底层开发，从底层向上抛。
	异常的继承体系
		throwable
			.Error
			.Execption
				.RuntimeExecption，可以处理也可以不处理
				。编译时的异常的抛出，必须对其进行处理，throws exception
	运行期出现的错误
	try{
		
	}
	catch(ArithmeticException ae){
		
	}
	finally{
		
	}
	
	异常分类
	error: 处理不了
	exception：一般异常，必须处理
				runtimeException：可以处理也可以不处理
			
	finally语句为异常处理提供了一个统一的出口，使得在控制流程转到程序的其他部分之前，能够对程序的状态进行统一管理
			无论try所指定的程序块是否剖出异常，finally所指定的代码都要被执行，用于释放资源，在IO流操作和数据库操作中
			return 语句相当于是方法的最后一口气，在他死之前会看看有没有finally帮其完成，如果有将其finally执行后在彻底退出
			如果在return 之前 System.exit(0),退出Java虚拟机，则不执行
	final 
		* final可以修饰类,不能被继承
		* 修饰方法,不能被重写
		* 修饰变量,只能赋值一次
	finaleze
		finalize是一个方法,当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。
	throw 和 throws的区别
		a:throws
			用在方法声明后面，跟的是异常类名
			可以跟多个异常类名，用逗号隔开
			表示抛出异常，由该方法的调用者来处理
			把出现的问题暴露出来让调用者处理
		b:throw
			用在方法体内，跟的是异常对象名
			只能抛出一个异常对象名
			表示抛出异常，由方法体内的语句处理
	
	
数组
	java 的数组是在堆上分配的
	int []arr =new int [5];
	type arr []=new type[];
	除了基本类型意外所有的数据类型都是引用类型
	
	每个数组都有一个属性length ,指明他的长度
	arr.length;
	
	静态初始化
		int a[][]={{1,2},{23,1}};
	数组的拷贝
		public static void arrayCopy(object src,int srcPos,Object dest,int destPos,int length)
		
	
常用类
	字符串相关类（String,StringBuffer）
		charAt：获取第某个位置的字符
		length:
		indexof():出现第一个字符串的位置
		s=s.subSting(length)；从起始开始的共计length个字符串截掉，剩余串给
		静态重载的方法
			把基本数据类型转换成字符串
			public static String valueOf()
		string :代表的是不可变的字符序列,线程不安全
		StringBulider :jdk1.5线程不安全，字符串可变的
		stringBuffer：对字符串可以进行改变，线程安全，效率低
			构造函数：StringBuffer();空参数构造出事16个字符
					  StringBuffer(String s)
		什么是线程安全：多个线程访问同一个代码，不会产生不确定的结果，依靠线程同步来做的		  
		String 			  
		byte [] getBytes();把字符串转换成字节数组
		char [] toArray();把字符串转换成字符数组
		Static String valueOf(char c):Returns the string representation of the char argument.
		static String	valueOf(int i):Returns the string representation of the int argument.
		int indexOf(int ch):Returns the index within this string of the first occurrence of the specified character.
		int	indexOf(String str):Returns the index within this string of the first occurrence of the specified substring.			  
		
		StringBuffer
			StringBuffer	append(char c)：Appends the string representation of the char argument to this sequence.
			StringBuffer	append(char[] str)：Appends the string representation of the char array argument to this sequence.
			StringBuffer	insert(int offset, char[] str)：Inserts the string representation of the char array argument into this sequence.
			StringBuffer	insert(int offset, char c)：Inserts the string representation of the char argument into this sequence.
			StringBuffer	delete(int start, int end)：Removes the characters in a substring of this sequence.
			StringBuffer	deleteCharAt(int index)：Removes the char at the specified position in this sequence.
			StringBuffer	reverse()：Causes this character sequence to be replaced by the reverse of the sequence.

		String 和 StringBuffer作为参数传递
			String 作为参数 基本数据类型的值传递，不改变其值
			StringBuffer作为参数，引用数据类型的值传递，改变其值
			String类虽然是引用数据类型的值，但是他当做参数传递时和基本数据类型是一样的
			
		
										
	基本数据类型包装类
		这些类封装了一个相应的基本基本数据类型数值，并为其提供了一系列操作
		byte     Byte
		short    Short
		int      Integer
		long     Long
		float    Float
		double   Double
		char     Character
		boolean  Boolean
		
		自动打包auto - boxing/unboxing 
			打包、打包的意思，一个基础数据类型转换成对象
			比如  interge 1  --> Interge 1
			例子：Integer i2 = 1000;
			注意：对于自动装箱值在-128~127，不会新建一个Integer对象，而是从常量池获取如果超过这个值Byte取值范围再创建对象
				  Integer i = 127;
				  Integer j = 127;  //同一个对象
				  
				  Integer i = 128;
				  Integer j = 128; //两个对象
		
	Math类
		abs：绝对值
		sqrt：开平方
		random()返回0.0到1.0随机值
		
		Random类，用来生成伪随机数
		Random r = new Random();
		int i = r.nextInt();
		int i = r.nextInt(100);  0-99随机分布的
		Random h = new Random(1000);  //
	File类
		java.io.File类代表系统文件名（路径和文件名）
		public File(String pathname)以pathname为路径创建File对象，如果
		方法：
			创建方法
				* public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了
				* public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了
				* public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来
			判断方法
				* public boolean isDirectory():判断是否是目录
				* public boolean isFile():判断是否是文件
				* public boolean exists():判断是否存在
				* public boolean canRead():判断是否可读
				* public boolean canWrite():判断是否可写
				* public boolean isHidden():判断是否隐藏
			获取方法
				* public String getAbsolutePath()：获取绝对路径
				* public String getPath():获取路径
				* public String getName():获取名称
				* public long length():获取长度。字节数
				* public long lastModified():获取最后一次的修改时间，毫秒值
				* public String[] list():获取指定目录下的所有文件或者文件夹的名称数组
				* public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 
	枚举类
		只能够取特定值中的一个
		使用关键字enum关键字
		public enum Myclour {red,green,blue};
		
		Myclour m =Myclour.red;
		
	System类
		
	
容器
	Java api所提供的一系列类的实例，用于在程序中存放对象,容器api位于Java.util中
	容器是怎么组织的
	一个图，一个类，三个知识点，六个接口
		一个图，一个类：Collections
		三个知识点，For,generic(泛型)，auto boxing 
		六个接口：Collection ,Set,List,Iterator,Comparable,Map
	一个图：
		<<interface>> 
		collection(集合)
	
		<<interface>>  <<interface>>
			Set           List
		set:无序，不可重复
		list:有序可重复
			
			
		HashSet(哈希算法),TreeSet（二叉树算法）      LinkList    ArrayList   vector
	
	
		<<interface>> 
			Map	
			HashMap  TreeMap
	Collection接口
		现在的：Set, List, Map, SortedSet, SortedMap, HashSet, TreeSet, ArrayList, LinkedList, Vector, Collections, Arrays, AbstractCollection
		容器类的对象在调用remove,contains等方法时需要比较对象是否相等，这会设计到对象类型的equals方法和hashCode方法，
		对于自定义的类型，需要重写equals和hashCode方法以实现自定义的对象的相等的规则
		注意：相等的对象应该具有相等的hash codes
		arrayList vector linklist的区别
			arrayList :底层数据结构是数组，查询快，增删慢，线程不安全，效率高
			vector : 底层数据结构是数组，查询快，增删慢，线程安全，效率低
			linkList :底层数据结构是链表，查询慢，增删快，线程不安全，效率高
			
			查询多用 arrayList
			增删多用linkList
			如果都多用：arrayList
		
	Iterator接口
		实际当中的游标，或者指针
		Iterator 对象的remove方法是在迭代过程中删除元素的唯一安全的方法
		锁定
		迭代器
		methods:
			boolean hasNext()
			object next()
			void remove()
		并发修改异常，concurrentModeficationException
			当方法检测到对象的并发修改，但不允许这种修改时候，抛出此异常
			举例：遍历的同时再增加元素
			
				  Iteratro i = c.iterator();
				  //ListIteratro i = list.ListIterator();   解决办法
				  while(i.hasNext()){
					String str = (String)it.next();
					if("word".equals(str){
						list.add("javaee");
					}
				  }
		
	增强的For循环
		缺陷：
			数组，不能方便的访问下标值
			集合，与使用iterator相比，不能方便的删除集合中的内容
		综上：少用增强for，用iterator
		int[] arr = {1,2,3,4};
		for(int i : arr){
			System.out.println(i);
		}
	Set接口
		是Collection的子接口，没有提供额外的方法，但实现Set接口的容器类中的元素是没有顺序的，而且不可以重复
		HashSet:利用hashcode码保证元素唯一，自定义的类需要重写，equals()和hashcode方法
		TreeSet:用来对元素进行排序的，保证元素的唯一，里面用到了排序，对于自定义的对象需要重写自定义对象需要实现Comparable接口，重写compareTo（）
				自然排序：
					底层结构是二叉树，怎么存：小的存储在左边（负数），大的存储在右边（正数），相等不存（0）
										  谁往二叉树上插入元素，谁就调用compareTo方法，
								  怎么取：后来的比先前的小，返回-1，从小到大
										  后来的比先来的小，返回1，从大到小。
				比较器排序：在TreeSet构造函数中传一个comparator
				a.自然顺序(Comparable)
					* TreeSet类的add()方法中会把存入的对象提升为Comparable类型
					* 调用对象的compareTo()方法和集合中的对象比较
					* 根据compareTo()方法返回的结果进行存储
				* b.比较器顺序(Comparator)
					* 创建TreeSet的时候可以制定 一个Comparator
					* 如果传入了Comparator的子类对象, 那么TreeSet就会按照比较器中的顺序排序
					* add()方法内部会自动调用Comparator接口中compare()方法排序
					* 调用的对象是compare方法的第一个参数,集合中的对象是compare方法的第二个参数
				* c.两种方式的区别
					* TreeSet构造函数什么都不传, 默认按照类中Comparable的顺序(没有就报错ClassCastException)
					* TreeSet如果传入Comparator, 就优先按照Comparator
									
	List接口
		Collection的子接口，实现List接口的容器类中的元素是有顺序的，而且可以重复。
		List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素
		
		java.util.Collections提供了一些静态方法实现了基于List容器的一些常用方法
		
		shuffle(List<?> list);随机排序
		reverse(List <> list);逆序
		sort(List <> list);排序，从小到大排序
		
	Comparable,排序的方法,接口
		为什么要有comparable 接口，两只猫谁大谁小，如果类支持排序，就需要重写
		按照什么顺序排序
		java.lang.Comparable
			
			public int compareTo(Object obj)，实现里面的唯一一个compareTo方法
		返回 0表示this==obj;
		返回整数表示 this > obj
		返回负数表示 this < obj
		
	如何选择数据结构
		衡量标准：读的效率和改的效率
		Array读快改慢
		Linked 改快读慢
		Hash 两者之间
	Map接口
		用来存储 key value 
		Map 类中存储的键值对通过键值来标识，所以键值不能重复
		HashMap
		TreeMap：对key进行排序
		
		* a:添加功能
			* V put(K key,V value):添加元素。
				* 如果键是第一次存储，就直接存储元素，返回null
				* 如果键不是第一次存在，就用值把以前的值替换掉，返回以前的值
		* b:删除功能
			* void clear():移除所有的键值对元素
			* V remove(Object key)：根据键删除键值对元素，并把值返回
		* c:判断功能
			* boolean containsKey(Object key)：判断集合是否包含指定的键
			* boolean containsValue(Object value):判断集合是否包含指定的值
			* boolean isEmpty()：判断集合是否为空
		* d:获取功能
			* Set<Map.Entry<K,V>> entrySet(): Entry是Map的内部接口
			* V get(Object key):根据键获取值
			* Set<K> keySet():获取集合中所有键的集合
			* Collection<V> values():获取集合中所有值的集合
		* e:长度功能
			* int size()：返回集合中的键值对的个数
		hashMap和hashtable的区别
			hashMap是线程不安全的，效率高，
			hashtable是线程安全的，效率低
			hashmap可以存储null键和null值，hashtable不可以存储
		
	泛型
		由来：早期的Object类型可以接收任意的对象类型，但是在实际的使用中，会有类型转换的问题。也就存在这隐患，所以Java提供了泛型来解决这个安全问题。
		泛型固定上边界： ？extends e ,把子类添加到父类的集合，（多态，父类引用指向子类对象）
		泛型固定下边界： ？ super e
		泛型类
			定义格式 public class 类名<泛型类型1,…>
			public class Tool <T>{
				private T obj;
				public T getObj(){
					return obj;
				}
			}
		泛型方法
			方法泛型需要与类的泛型一致，如果不一致需要再方法上声明该泛型
			public <泛型类型> 返回类型 方法名(泛型类型 变量名)
		泛型接口
			 public interface 接口名<泛型类型>
		增强程序的可读性
		List<String> c = new ArrayList<String>();
		for(int i=0; i<c.size(); i++){
			
		}
		for(Iterator <String>it = c.iterator(); it.hasNext();)
	
	
IO 
	stream(流)
	java.io包中定义了多个流类型,分别继承自以下四种抽象类型
	
			字节流            字符流(16位)
	输入流  InputStream       Reader
	输出流  OutputStream      Writer
	
	一端接着程序一端接着数据源
		
	输入流输出流都是站在程序的角度
	
	
	字节流读取中文的问题
			* 字节流在读中文的时候有可能会读到半个中文,造成乱码 
	字节流写出中文的问题
			* 字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组 write("哈哈".getBytes())
			* 写出回车换行 write("\r\n".getBytes());
	IO加密和解密，在写入的时候数据异或一个数据，在读出的时候再异或一个数据，A^B^B = A 
	
	字符流
		直接读写字符的IO流
		字符流读取字符，首先读取到字节数据，然后转为字符，如果要写出字符，转换为字节再写出
		
		字符流注意事项：
			字符流也可以拷贝文本文件, 但不推荐使用. 因为读取时会把字节转为字符, 写出时还要把字符转回字节.浪费效率
			字符流不可以拷贝非纯文本的文件因为在读的时候会将字节转换为字符,在转换过程中,可能找不到对应的字符,就会用?代替,写出的时候会将字符转换成字节写出去
				如果是?,直接写出,这样写出之后的文件就乱了,看不了了
		BufferedReader	
			readLine(),读取某一行
			newLine()，回车换行，跨平台的方法,\r\n只支持win
			
	
	序列流
		把多个字节流整合成一个流
	内存输出流
		该输出流可以向内存写入数据，把内存当作一个缓冲区, 写出之后可以一次性获取出所有数据 ByteArrayOutputStream
	Object流
		该流可以将一个对象写出, 或者读取一个对象到程序中. 也就是执行了序列化和反序列化的操作.
		将对象写到文件上，序列化，ObjectOutputStream
		从文件上读取对象，反序列化ObjectInputStream
	打印流
		PrintStream
		PrintWriter
		两个只操作目的
	标准输入输出流（System.in;System.out）
		输入流只有一个，如果关掉则不能开了
		
	数据输入输出流
	
	
		
java多线程
	并行和并发
		并行：两个任务同时运行，甲任务运行的时候，乙任务也运行，需要多核CPU
		并发：两个任务都请求运行，而处理器只能接收一个任务，就把两个任务安排轮流进行，由于时间较短，使人感觉两个任务都在运行
	Java程序运行原理
		Java命令会启动Java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法。
	Java是多线程的？
		因为同时启动了，jvm,垃圾收集器，所以是多线程的
	线程和进程的区别
		每个进程都有独立的代码和数据空间，进程间的切
		进程是一个静态的概念
		一个时间点上CPU只有一个线程
		方法调用，线程启动
		
	创建线程的方法
			第一种：
				定义线程类实现runnable接口，重写run 方法，调用
				class targe implements Runnable{
					public void run(){
						 
					}
				}
				Thread myThread =new Thread(target)//target 为runnable接口类型
				myThread.start();
				
				runnable 中只有一个方法
					public void run():用以定义线程运行体
					使用runnable接口可以为多个线程提供共享的数据
					在实现runnable接口的类的run方法定义中可以使用thread的静态的方法：
					public static Thread currentThread()获取当前线程的引用
			第二种：
				定义一个Thread的子类，并重写其run方法，继承thread类的方法
				class myThread extends Thread{
					public void run{
						
					}
				}
		
				Runner r = new myThread();
				r.start();
			
			两种方式的区别
				查看源码的区别：继承Thread ,由于子类重写了Thread类的Run,当调用Start时候，直接找子类的Run方法
								实现Runnable接口，Thread构造函数传入Runnable的引用，
				
				继承Thread 
					好处，可以使用Thread类中的方法，代码简单
					弊端，如果有父类，就不能使用这种方法
				实现Runnable接口
					好处，即使自己定义的线程类有了父类也没有关系，因为有了父类可以实现接口，而接口是可以多实现的
					弊端，不能直接使用Thread中的方法，需要先获取到线程对象，Thread.currentThread().method()
		
	匿名内部类实现线程的两种方法
		直接继承thread
		public static void main (String [] args){
			new Thread (){
				public void run(){
					System.out.println("jajaf");
				}
			}.start();
		}  
		
		实现Runnable接口
		public static void main (String [] args){
			new Thread (new Runnable(){
				public void run (){
					System.out.println("jajaf");
				}
			}).start();
		} 	

	守护线程
		Thread.setDaemon(true);
		当守护线程结束的时候，当前主线程就结束
		只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作
	线程同步
		什么时候需要同步
			当多线程并发，有多段代码同时执行的时候，我们希望某一段代码执行的过程中CPU不要切换到其他线程工作
			如果两段代码是同步的，同一时间只能执行一段，在一段代码没有执行完，另一段代码不会执行
		同步代码块
			使用Synchronized关键字加上一个锁对象来定义一段代码
	线程安全
		多线程并发使用同一个代码段的时候，
	线程的状态
			 五个状态：新建，就绪，运行，阻塞，死亡
			 isAlive()
			 getPriority()
			 setPriority()设置线程的优先级数值
			 Thread.sleep( ms )；将当前线程睡眠指定毫秒数
			 join();当前的线程暂停，等待指定的线程执行结束后，当前线程再继续
			 yiled()；让出CPU，当前线程进入就绪队列等待调度
			 wait()：
			 notify()
			 
	
			sleep,join ,yiled静态方法
			
			
			join 线程合并相当于方法调用
				执行完子线程的程序，返回继续执行join后的程序
			yiled方法，让出cpu,给其他线程机会
			
			线程的优先级用数字表示，范围从1到10，从小到大的顺序表示优先级
			
			在有限的时间里面做最有价值的东西上，先可持续发展再谈其他的东西。

		

		
	线程安全类
		vector,StringBuffer HashTable  Collections.synchronized(XXX)
		vector是线程安全的，ArrayList是线程不安全的
		StringBuffer是线程安全的，StringBuilder是线程不安全的
		HashTable是线程安全的，HashMap是线程不安全的
	线程死锁
		尽量不使用嵌套

	线程之前的通信
		什么时候需要通信
			多个线程并发执行的时候，在默认的情况下CPU是随机切换线程的
			如果我们希望他们有规律的执行，就可以使用通信，
		怎么通信
			如果希望线程等待，就调用wati()
			如果希望唤醒等待的线程，就调用notify()
			这两个方法必须在同步代码中执行，并且使用同步锁对象来调用
			
			notify()方法是随机唤醒一个线程
			notifyAll()方法是唤醒所有的线程
			如果多个线程之间通信需要使用notifyAll()通知所有线程，用while 来反复判断条件，不用if
			
		互斥锁
			
		sleep和wait方法的区别
			sleep必须传入参数，时间到了线程醒来
			wait可以传入参数也可以不传入参数，传入参数就是在参数的时间结束后等待，不传入参数直接等待
			
			sleep方法在同步函数或同步代码块中，不释放锁，睡着了也抱着锁
			wait方法在同步函数或者同步代码中，释放锁
			
	线程组
		Java中使用ThreadGroup来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。
		默认情况下，所有的线程都属于主线程组
	线程池
		程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池。线程池里的每一个线程代码结束后，并不会死亡，
		而是再次回到线程池中成为空闲状态，等待下一个对象来使用。在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池	
		
网络
	网络基础
		hibnate屏蔽了 数据库的这一层
				
	osi
		应用层
		表示层
		会话层
		传输层
		网络层
		数据链路层
		物理层
		
	TCP、IP参考模型
		应用层
		传输层
		网络层
		网络接口层
		
		IP地址（A类B类C类）
		   1       89            1617           2425            32
		A    1-126     host              host           host
		B    128-191    network          host           host
		C    192-223    network          network        host
		
		子网掩码：
				A类：255.0.0.0
				B类：255.255.0.0
				C类：255.255.255.0
				反是位是1的字节都是网路ＩＤ，０的ＩＤ是ｈｏｓｔ
				
		127.0.0.1是什么地址：本地机的地址，用于测试使用
		255.255.255.255：广播地址
		tcp
		udp
		
		管理：时间管理，人脉管理，技术管理
		
		常用的端口号
			mysql:3306
			oracle:1521
			tomcat:8080
			qq:4000
		
	socket编程
		java.net Socket Server Socket 
		
		端口号：用来区分同一个电脑上的不同的应用程序
		
		首先启动server，再启动client
		互相之间定义一个通讯协议
		
		异步式的编程：异步IO
		
		OutputStream,InputStream,
		
		异步的模型，多线程的问题
		
		
	UDP
		不可靠，数据报，音频视频，不区分client和server
		TCP和UDP占用的端口是两套系统,各有65536个
		datagrampacket 
		
		
		
gui编程
	awt java.awt ,比较旧的开发包
		abstract window toolkit
		新的开发包，javax.swing
		web  application 
		gui的各种元素（如窗口，按钮，文本框）由Java类来实现
		ajax完全替代，javascript完全替代
		最基本的组成部分，component
		
		frame 
		Frame f = new Frame ("myfirst test");
		f.set
	组件和容器
	
		
	java事件处理机制
			
		
		
		
Java日期处理	
	数据库里面的日期时间处理
	
	
	
	Java遗留的问题：
	1；孩子手拉手，如果用win cmd窗口可以进行，如果用集成编译环境就不行了，这是为什么呢？
	2：内部类
	

	
java 常用设计模式
		装饰
		单例
		简单工厂
		工厂方法
		适配器
		模板
			定义一个算法的骨架，而将具体的算法延迟到子类中来实现
			
		

Java反射机制

		反射是框架设计的灵魂
		
		动态获取类的属性和方法
		什么是反射：在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法
					对于任意一个对象，都能够调用它的任意一个方法和属性
					这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制
					
					要想解剖一个类必须先获取到该类的字节码文件对象
					解剖使用Class类中的方法，先要获取到每一个字节码文件对应的Class类型的对象
					
			  
		
		程序的三个阶段
						源文件阶段         					字节码阶段           			创建对象阶段
			
						person.java       					person.class         			Person p = new Person()
			
			获取方法： 	Class clazz=Class.forName("类名")   Class clazz = Person.class      Class clazz = p.getClass()   
			作用：      读取配置文件                        当做静态方法的锁对象             判断是否是同一个字节码对象
			
		通过反射读取配置文件
		通过反射获取带参构造方法并使用
		通过反射获取成员变量并使用
		通过反射获取方法并使用
		通过反射越过类型检查
		

		经验：在elipse下查找文件是相对于整个工程而言的，在整个工程的下面才可以是直接寻找
		
		
		
正则表达式
		针对的是String类
		java.util.regx;
		是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串，其实是一种规则
		比如注册邮箱，邮箱有用户名，一般对其限制长度
		使用举例：
			String regex = "[abc]?";
			System.out.println("a".matches(regex)) //true;
			System.out.println("d".matches(regex)) //false;
	
			正则表达的分割功能  split
			正则表达的替换功能  replaceAll(String regex,String replacement)
	
		Pattern类		Matcher类
			static Pattern	compile(String regex):Compiles the given regular expression into a pattern.  //获取到正则表达式
			Matcher	matcher(CharSequence input)：Creates a matcher that will match the given input against this pattern. //获取匹配器
			boolean Matcher.matches();  //看是否能匹配，匹配就返回true
			
			例子：
				Patternn p = Pattern.compile("a*b");
				Matcher m = p.matcher("abcd");
				boolean b = m.matches();
			
				就等于：
				"abcd".matches("a*b");
			
			
			
			
			
			
			
			
			
	